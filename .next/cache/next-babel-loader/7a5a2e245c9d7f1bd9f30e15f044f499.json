{"ast":null,"code":"var _jsxFileName = \"/Users/jasonbryant/Desktop/nrel/components/chart.js\";\nvar __jsx = React.createElement;\nimport * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nlet accessToRef = null;\nexport default function Chart(props) {\n  let chartRef = /*#__PURE__*/createRef();\n  const {\n    0: loadedChart,\n    1: updateLoadStatus\n  } = useState(false),\n        h_max = Math.max(props.y),\n        data_length = props.x.length,\n        h = 500,\n        w = 400;\n\n  const drawChart = () => {\n    if (accessToRef != null) accessToRef.selectAll(\"*\").remove();\n\n    if (!loadedChart) {\n      accessToRef = d3.select(chartRef.current).append('svg').attr('width', w) // w\n      .attr('height', h) // h\n      .style('background-color', '#ffffff').style('padding', 10).style('margin-left', 0);\n      updateLoadStatus(true);\n    }\n\n    if (true) {\n      console.log('setting data', props.y);\n      accessToRef.selectAll('rect').data(props.y).enter().append('rect').attr('x', (d, i) => i * 70).attr('y', (d, i) => h - 10 * d).attr('width', 400 / data_length) // 65\n      .attr('height', (d, i) => d * 10).attr('fill', 'tomato');\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      drawChart();\n    }, 2000);\n  }, [props.coordsStr, loadedChart]);\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Graphs with React\"), __jsx(\"div\", {\n    id: \"chart\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n}\nChart.propTypes = {\n  x: PropTypes.array,\n  y: PropTypes.array,\n  coordsStr: PropTypes.string\n};\nChart.defaultProps = {\n  x: [],\n  y: [],\n  coordsStr: ''\n};","map":{"version":3,"sources":["/Users/jasonbryant/Desktop/nrel/components/chart.js"],"names":["d3","React","Fragment","useEffect","useState","createRef","PropTypes","accessToRef","Chart","props","chartRef","loadedChart","updateLoadStatus","h_max","Math","max","y","data_length","x","length","h","w","drawChart","selectAll","remove","select","current","append","attr","style","console","log","data","enter","d","i","setTimeout","coordsStr","propTypes","array","string","defaultProps"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAIC,WAAW,GAAG,IAAlB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,MAAIC,QAAQ,gBAAGL,SAAS,EAAxB;AAEA,QAAM;AAAA,OAACM,WAAD;AAAA,OAAcC;AAAd,MAAkCR,QAAQ,CAAC,KAAD,CAAhD;AAAA,QACIS,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASN,KAAK,CAACO,CAAf,CADZ;AAAA,QAEIC,WAAW,GAAGR,KAAK,CAACS,CAAN,CAAQC,MAF1B;AAAA,QAGIC,CAAC,GAAG,GAHR;AAAA,QAIIC,CAAC,GAAG,GAJR;;AAMA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAGf,WAAW,IAAI,IAAlB,EACIA,WAAW,CAACgB,SAAZ,CAAsB,GAAtB,EAA2BC,MAA3B;;AAEJ,QAAG,CAACb,WAAJ,EAAiB;AACbJ,MAAAA,WAAW,GAAGP,EAAE,CAACyB,MAAH,CAAUf,QAAQ,CAACgB,OAAnB,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEKP,CAFL,EAEQ;AAFR,OAGTO,IAHS,CAGJ,QAHI,EAGMR,CAHN,EAGS;AAHT,OAITS,KAJS,CAIH,kBAJG,EAIiB,SAJjB,EAKTA,KALS,CAKH,SALG,EAKQ,EALR,EAMTA,KANS,CAMH,aANG,EAMY,CANZ,CAAd;AAQIjB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACP;;AAED,QAAG,IAAH,EAAS;AACLkB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BtB,KAAK,CAACO,CAAlC;AACAT,MAAAA,WAAW,CAACgB,SAAZ,CAAsB,MAAtB,EACKS,IADL,CACUvB,KAAK,CAACO,CADhB,EAEKiB,KAFL,GAGKN,MAHL,CAGY,MAHZ,EAIKC,IAJL,CAIU,GAJV,EAIe,CAACM,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,EAJ7B,EAKKP,IALL,CAKU,GALV,EAKe,CAACM,CAAD,EAAIC,CAAJ,KAAUf,CAAC,GAAG,KAAKc,CALlC,EAMKN,IANL,CAMU,OANV,EAMoB,MAAIX,WANxB,EAMsC;AANtC,OAOKW,IAPL,CAOU,QAPV,EAOoB,CAACM,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAG,EAPlC,EAQKN,IARL,CAQU,MARV,EAQkB,QARlB;AASC;AACR,GA5BD;;AA8BAzB,EAAAA,SAAS,CAAC,MAAM;AACZiC,IAAAA,UAAU,CAAC,MAAK;AACZd,MAAAA,SAAS;AACZ,KAFS,EAEP,IAFO,CAAV;AAGH,GAJQ,EAIN,CAACb,KAAK,CAAC4B,SAAP,EAAkB1B,WAAlB,CAJM,CAAT;AAOA,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAK,IAAA,EAAE,EAAC,OAAR;AAAgB,IAAA,GAAG,EAAED,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;AAEDF,KAAK,CAAC8B,SAAN,GAAkB;AACdpB,EAAAA,CAAC,EAAEZ,SAAS,CAACiC,KADC;AAEdvB,EAAAA,CAAC,EAAEV,SAAS,CAACiC,KAFC;AAGdF,EAAAA,SAAS,EAAE/B,SAAS,CAACkC;AAHP,CAAlB;AAMAhC,KAAK,CAACiC,YAAN,GAAqB;AACjBvB,EAAAA,CAAC,EAAE,EADc;AAEjBF,EAAAA,CAAC,EAAE,EAFc;AAGjBqB,EAAAA,SAAS,EAAE;AAHM,CAArB","sourcesContent":["import * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types'\n\nlet accessToRef = null\n\nexport default function Chart(props) {\n    let chartRef = createRef()\n\n    const [loadedChart, updateLoadStatus] = useState(false),\n        h_max = Math.max(props.y),\n        data_length = props.x.length,\n        h = 500,\n        w = 400\n\n    const drawChart = () => {\n        if(accessToRef != null)\n            accessToRef.selectAll(\"*\").remove()\n\n        if(!loadedChart) {\n            accessToRef = d3.select(chartRef.current)\n                .append('svg')\n                .attr('width', w) // w\n                .attr('height', h) // h\n                .style('background-color', '#ffffff')\n                .style('padding', 10)\n                .style('margin-left', 0)\n\n                updateLoadStatus(true)\n        }\n\n        if(true) {\n            console.log('setting data', props.y)\n            accessToRef.selectAll('rect')\n                .data(props.y)\n                .enter()\n                .append('rect')\n                .attr('x', (d, i) => i * 70)\n                .attr('y', (d, i) => h - 10 * d)\n                .attr('width', (400/data_length)) // 65\n                .attr('height', (d, i) => d * 10)\n                .attr('fill', 'tomato')\n            }\n    }\n\n    useEffect(() => {\n        setTimeout(()=> {\n            drawChart()\n        }, 2000)\n    }, [props.coordsStr, loadedChart]);\n\n\n    return (\n        <Fragment>\n            <h2>Graphs with React</h2>\n            <div id=\"chart\" ref={chartRef}></div>\n        </Fragment>\n    );\n}\n\nChart.propTypes = {\n    x: PropTypes.array,\n    y: PropTypes.array,\n    coordsStr: PropTypes.string\n}\n  \nChart.defaultProps = {\n    x: [],\n    y: [],\n    coordsStr: ''\n}"]},"metadata":{},"sourceType":"module"}