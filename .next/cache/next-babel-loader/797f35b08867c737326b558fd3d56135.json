{"ast":null,"code":"var _jsxFileName = \"/Users/jasonbryant/Desktop/nrel/components/chart.js\";\nvar __jsx = React.createElement;\nimport * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nexport default function Chart(props) {\n  let chartRef = /*#__PURE__*/createRef();\n  const {\n    0: loadedChart,\n    1: updateLoadStatus\n  } = useState(false),\n        {\n    0: data,\n    1: setData\n  } = useState([]),\n        h = 500,\n        w = 400;\n\n  const drawChart = () => {\n    if (!loadedChart) {\n      const accessToRef = d3.select(chartRef.current).append('svg').attr('width', w) // w\n      .attr('height', h) // h\n      .style('background-color', '#ffffff').style('padding', 10).style('margin-left', 50);\n      updateLoadStatus(true);\n    }\n\n    if (accessToRef != undefined) {\n      accessToRef.selectAll('rect').data([3, 6, 10, 4]).enter().append('rect').attr('x', (d, i) => i * 70).attr('y', (d, i) => h - 10 * d).attr('width', 65).attr('height', (d, i) => d * 10).attr('fill', 'tomato');\n    }\n  }; // const drawChart = (height, width) => {\n  //     d3.select(\"#chart\")\n  //         .append(\"svg\")\n  //         .attr(\"width\", width)\n  //         .attr(\"height\", height)\n  //         .style(\"border\", \"1px solid black\")\n  //         .append(\"text\")\n  //         .attr(\"fill\", \"green\")\n  //         .attr(\"x\", 50)\n  //         .attr(\"y\", 50)\n  //         .text(\"Hello D3\")\n  // }\n\n\n  useEffect(() => {\n    drawChart();\n    console.log('chartRef', chartRef.current);\n  }, [props.coordsStr, loadedChart]);\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Graphs with React\"), __jsx(\"div\", {\n    id: \"chart\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n}\nChart.propTypes = {\n  x: PropTypes.array,\n  y: PropTypes.array,\n  coordsStr: PropTypes.string\n};\nChart.defaultProps = {\n  x: [],\n  y: [],\n  coordsStr: ''\n};","map":{"version":3,"sources":["/Users/jasonbryant/Desktop/nrel/components/chart.js"],"names":["d3","React","Fragment","useEffect","useState","createRef","PropTypes","Chart","props","chartRef","loadedChart","updateLoadStatus","data","setData","h","w","drawChart","accessToRef","select","current","append","attr","style","undefined","selectAll","enter","d","i","console","log","coordsStr","propTypes","x","array","y","string","defaultProps"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,MAAIC,QAAQ,gBAAGJ,SAAS,EAAxB;AAEA,QAAM;AAAA,OAACK,WAAD;AAAA,OAAcC;AAAd,MAAkCP,QAAQ,CAAC,KAAD,CAAhD;AAAA,QACI;AAAA,OAACQ,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,EAAD,CAD9B;AAAA,QAEIU,CAAC,GAAG,GAFR;AAAA,QAGIC,CAAC,GAAG,GAHR;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAG,CAACN,WAAJ,EAAiB;AACb,YAAMO,WAAW,GAAGjB,EAAE,CAACkB,MAAH,CAAUT,QAAQ,CAACU,OAAnB,EACfC,MADe,CACR,KADQ,EAEfC,IAFe,CAEV,OAFU,EAEDN,CAFC,EAEE;AAFF,OAGfM,IAHe,CAGV,QAHU,EAGAP,CAHA,EAGG;AAHH,OAIfQ,KAJe,CAIT,kBAJS,EAIW,SAJX,EAKfA,KALe,CAKT,SALS,EAKE,EALF,EAMfA,KANe,CAMT,aANS,EAMM,EANN,CAApB;AAQIX,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACP;;AAED,QAAGM,WAAW,IAAIM,SAAlB,EAA6B;AACzBN,MAAAA,WAAW,CAACO,SAAZ,CAAsB,MAAtB,EACKZ,IADL,CACU,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,CADV,EAEKa,KAFL,GAGKL,MAHL,CAGY,MAHZ,EAIKC,IAJL,CAIU,GAJV,EAIe,CAACK,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,EAJ7B,EAKKN,IALL,CAKU,GALV,EAKe,CAACK,CAAD,EAAIC,CAAJ,KAAUb,CAAC,GAAG,KAAKY,CALlC,EAMKL,IANL,CAMU,OANV,EAMmB,EANnB,EAOKA,IAPL,CAOU,QAPV,EAOoB,CAACK,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAG,EAPlC,EAQKL,IARL,CAQU,MARV,EAQkB,QARlB;AASC;AACR,GAxBD,CARiC,CAoCjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,SAAS;AAETY,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBpB,QAAQ,CAACU,OAAjC;AACH,GAJQ,EAIN,CAACX,KAAK,CAACsB,SAAP,EAAkBpB,WAAlB,CAJM,CAAT;AAOA,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAK,IAAA,EAAE,EAAC,OAAR;AAAgB,IAAA,GAAG,EAAED,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;AAEDF,KAAK,CAACwB,SAAN,GAAkB;AACdC,EAAAA,CAAC,EAAE1B,SAAS,CAAC2B,KADC;AAEdC,EAAAA,CAAC,EAAE5B,SAAS,CAAC2B,KAFC;AAGdH,EAAAA,SAAS,EAAExB,SAAS,CAAC6B;AAHP,CAAlB;AAMA5B,KAAK,CAAC6B,YAAN,GAAqB;AACjBJ,EAAAA,CAAC,EAAE,EADc;AAEjBE,EAAAA,CAAC,EAAE,EAFc;AAGjBJ,EAAAA,SAAS,EAAE;AAHM,CAArB","sourcesContent":["import * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types'\n\nexport default function Chart(props) {\n    let chartRef = createRef()\n\n    const [loadedChart, updateLoadStatus] = useState(false),\n        [data, setData] = useState([]),\n        h = 500,\n        w = 400\n\n    const drawChart = () => {\n        if(!loadedChart) {\n            const accessToRef = d3.select(chartRef.current)\n                .append('svg')\n                .attr('width', w) // w\n                .attr('height', h) // h\n                .style('background-color', '#ffffff')\n                .style('padding', 10)\n                .style('margin-left', 50)\n\n                updateLoadStatus(true)\n        }\n\n        if(accessToRef != undefined) {\n            accessToRef.selectAll('rect')\n                .data([3, 6, 10, 4])\n                .enter()\n                .append('rect')\n                .attr('x', (d, i) => i * 70)\n                .attr('y', (d, i) => h - 10 * d)\n                .attr('width', 65)\n                .attr('height', (d, i) => d * 10)\n                .attr('fill', 'tomato')\n            }\n    }\n\n    \n\n    // const drawChart = (height, width) => {\n    //     d3.select(\"#chart\")\n    //         .append(\"svg\")\n    //         .attr(\"width\", width)\n    //         .attr(\"height\", height)\n    //         .style(\"border\", \"1px solid black\")\n    //         .append(\"text\")\n    //         .attr(\"fill\", \"green\")\n    //         .attr(\"x\", 50)\n    //         .attr(\"y\", 50)\n    //         .text(\"Hello D3\")\n    // }\n\n    useEffect(() => {\n        drawChart()\n        \n        console.log('chartRef', chartRef.current)\n    }, [props.coordsStr, loadedChart]);\n\n\n    return (\n        <Fragment>\n            <h2>Graphs with React</h2>\n            <div id=\"chart\" ref={chartRef}></div>\n        </Fragment>\n    );\n}\n\nChart.propTypes = {\n    x: PropTypes.array,\n    y: PropTypes.array,\n    coordsStr: PropTypes.string\n}\n  \nChart.defaultProps = {\n    x: [],\n    y: [],\n    coordsStr: ''\n}"]},"metadata":{},"sourceType":"module"}