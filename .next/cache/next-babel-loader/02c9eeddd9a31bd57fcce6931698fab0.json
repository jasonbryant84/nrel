{"ast":null,"code":"var _jsxFileName = \"/Users/jasonbryant/Desktop/nrel/components/chart.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nexport default function Chart(props) {\n  _s();\n\n  var chartRef = /*#__PURE__*/createRef(),\n      accessToRef = null;\n\n  var _useState = useState(false),\n      loadedChart = _useState[0],\n      updateLoadStatus = _useState[1],\n      _useState2 = useState([]),\n      data = _useState2[0],\n      setData = _useState2[1],\n      h = 500,\n      w = 400;\n\n  var drawChart = function drawChart() {\n    if (!loadedChart) {\n      var _accessToRef = d3.select(chartRef.current).append('svg').attr('width', w) // w\n      .attr('height', h) // h\n      .style('background-color', '#ffffff').style('padding', 10).style('margin-left', 50);\n\n      updateLoadStatus(true);\n    }\n\n    if (accessToRef != null) {\n      accessToRef.selectAll('rect').data([3, 6, 10, 4]).enter().append('rect').attr('x', function (d, i) {\n        return i * 70;\n      }).attr('y', function (d, i) {\n        return h - 10 * d;\n      }).attr('width', 65).attr('height', function (d, i) {\n        return d * 10;\n      }).attr('fill', 'tomato');\n    }\n  }; // const drawChart = (height, width) => {\n  //     d3.select(\"#chart\")\n  //         .append(\"svg\")\n  //         .attr(\"width\", width)\n  //         .attr(\"height\", height)\n  //         .style(\"border\", \"1px solid black\")\n  //         .append(\"text\")\n  //         .attr(\"fill\", \"green\")\n  //         .attr(\"x\", 50)\n  //         .attr(\"y\", 50)\n  //         .text(\"Hello D3\")\n  // }\n\n\n  useEffect(function () {\n    drawChart();\n    console.log('chartRef', chartRef.current);\n  }, [props.coordsStr, loadedChart]);\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Graphs with React\"), __jsx(\"div\", {\n    id: \"chart\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(Chart, \"gVIT8qWMfJ2djToJalQPiF4tMNw=\");\n\n_c = Chart;\nChart.propTypes = {\n  x: PropTypes.array,\n  y: PropTypes.array,\n  coordsStr: PropTypes.string\n};\nChart.defaultProps = {\n  x: [],\n  y: [],\n  coordsStr: ''\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/jasonbryant/Desktop/nrel/components/chart.js"],"names":["d3","React","Fragment","useEffect","useState","createRef","PropTypes","Chart","props","chartRef","accessToRef","loadedChart","updateLoadStatus","data","setData","h","w","drawChart","select","current","append","attr","style","selectAll","enter","d","i","console","log","coordsStr","propTypes","x","array","y","string","defaultProps"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types'\n\nexport default function Chart(props) {\n    let chartRef = createRef(),\n        accessToRef = null\n\n    const [loadedChart, updateLoadStatus] = useState(false),\n        [data, setData] = useState([]),\n        h = 500,\n        w = 400\n\n    const drawChart = () => {\n        if(!loadedChart) {\n            const accessToRef = d3.select(chartRef.current)\n                .append('svg')\n                .attr('width', w) // w\n                .attr('height', h) // h\n                .style('background-color', '#ffffff')\n                .style('padding', 10)\n                .style('margin-left', 50)\n\n                updateLoadStatus(true)\n        }\n\n        if(accessToRef != null) {\n            accessToRef.selectAll('rect')\n                .data([3, 6, 10, 4])\n                .enter()\n                .append('rect')\n                .attr('x', (d, i) => i * 70)\n                .attr('y', (d, i) => h - 10 * d)\n                .attr('width', 65)\n                .attr('height', (d, i) => d * 10)\n                .attr('fill', 'tomato')\n            }\n    }\n\n    \n\n    // const drawChart = (height, width) => {\n    //     d3.select(\"#chart\")\n    //         .append(\"svg\")\n    //         .attr(\"width\", width)\n    //         .attr(\"height\", height)\n    //         .style(\"border\", \"1px solid black\")\n    //         .append(\"text\")\n    //         .attr(\"fill\", \"green\")\n    //         .attr(\"x\", 50)\n    //         .attr(\"y\", 50)\n    //         .text(\"Hello D3\")\n    // }\n\n    useEffect(() => {\n        drawChart()\n        \n        console.log('chartRef', chartRef.current)\n    }, [props.coordsStr, loadedChart]);\n\n\n    return (\n        <Fragment>\n            <h2>Graphs with React</h2>\n            <div id=\"chart\" ref={chartRef}></div>\n        </Fragment>\n    );\n}\n\nChart.propTypes = {\n    x: PropTypes.array,\n    y: PropTypes.array,\n    coordsStr: PropTypes.string\n}\n  \nChart.defaultProps = {\n    x: [],\n    y: [],\n    coordsStr: ''\n}"]},"metadata":{},"sourceType":"module"}