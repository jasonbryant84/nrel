{"ast":null,"code":"var _jsxFileName = \"/Users/jasonbryant/Desktop/nrel/components/chart.js\";\nvar __jsx = React.createElement;\nimport * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types';\nlet accessToRef = null;\nexport default function Chart(props) {\n  let chartRef = /*#__PURE__*/createRef();\n  const {\n    0: loadedChart,\n    1: updateLoadStatus\n  } = useState(false),\n        {\n    0: data,\n    1: setData\n  } = useState([]),\n        h = 500,\n        w = 400;\n\n  const drawChart = () => {\n    accessToRef = d3.select(chartRef.current).append('svg').attr('width', w) // w\n    .attr('height', h) // h\n    .style('background-color', '#ffffff').style('padding', 10).style('margin-left', 50);\n    updateLoadStatus(true);\n    accessToRef.selectAll('rect').data(props.y).enter().append('rect').attr('x', (d, i) => i * 70).attr('y', (d, i) => h - 10 * d).attr('width', 65).attr('height', (d, i) => d * 10).attr('fill', 'tomato');\n  };\n\n  useEffect(() => {\n    drawChart();\n  }, []);\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"Average DNI\"), __jsx(\"div\", {\n    id: \"chart\",\n    ref: chartRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n}\nChart.propTypes = {\n  x: PropTypes.array,\n  y: PropTypes.array,\n  coordsStr: PropTypes.string\n};\nChart.defaultProps = {\n  x: [],\n  y: [],\n  coordsStr: ''\n};","map":{"version":3,"sources":["/Users/jasonbryant/Desktop/nrel/components/chart.js"],"names":["d3","React","Fragment","useEffect","useState","createRef","PropTypes","accessToRef","Chart","props","chartRef","loadedChart","updateLoadStatus","data","setData","h","w","drawChart","select","current","append","attr","style","selectAll","y","enter","d","i","propTypes","x","array","coordsStr","string","defaultProps"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAIC,WAAW,GAAG,IAAlB;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,MAAIC,QAAQ,gBAAGL,SAAS,EAAxB;AAEA,QAAM;AAAA,OAACM,WAAD;AAAA,OAAcC;AAAd,MAAkCR,QAAQ,CAAC,KAAD,CAAhD;AAAA,QACI;AAAA,OAACS,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,EAAD,CAD9B;AAAA,QAEIW,CAAC,GAAG,GAFR;AAAA,QAGIC,CAAC,GAAG,GAHR;;AAKA,QAAMC,SAAS,GAAG,MAAM;AACpBV,IAAAA,WAAW,GAAGP,EAAE,CAACkB,MAAH,CAAUR,QAAQ,CAACS,OAAnB,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEKL,CAFL,EAEQ;AAFR,KAGTK,IAHS,CAGJ,QAHI,EAGMN,CAHN,EAGS;AAHT,KAITO,KAJS,CAIH,kBAJG,EAIiB,SAJjB,EAKTA,KALS,CAKH,SALG,EAKQ,EALR,EAMTA,KANS,CAMH,aANG,EAMY,EANZ,CAAd;AAQIV,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEJL,IAAAA,WAAW,CAACgB,SAAZ,CAAsB,MAAtB,EACKV,IADL,CACUJ,KAAK,CAACe,CADhB,EAEKC,KAFL,GAGKL,MAHL,CAGY,MAHZ,EAIKC,IAJL,CAIU,GAJV,EAIe,CAACK,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,EAJ7B,EAKKN,IALL,CAKU,GALV,EAKe,CAACK,CAAD,EAAIC,CAAJ,KAAUZ,CAAC,GAAG,KAAKW,CALlC,EAMKL,IANL,CAMU,OANV,EAMmB,EANnB,EAOKA,IAPL,CAOU,QAPV,EAOoB,CAACK,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAG,EAPlC,EAQKL,IARL,CAQU,MARV,EAQkB,QARlB;AASH,GApBD;;AAsBAlB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAKA,SACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAK,IAAA,EAAE,EAAC,OAAR;AAAgB,IAAA,GAAG,EAAEP,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;AAEDF,KAAK,CAACoB,SAAN,GAAkB;AACdC,EAAAA,CAAC,EAAEvB,SAAS,CAACwB,KADC;AAEdN,EAAAA,CAAC,EAAElB,SAAS,CAACwB,KAFC;AAGdC,EAAAA,SAAS,EAAEzB,SAAS,CAAC0B;AAHP,CAAlB;AAMAxB,KAAK,CAACyB,YAAN,GAAqB;AACjBJ,EAAAA,CAAC,EAAE,EADc;AAEjBL,EAAAA,CAAC,EAAE,EAFc;AAGjBO,EAAAA,SAAS,EAAE;AAHM,CAArB","sourcesContent":["import * as d3 from 'd3';\nimport React, { Fragment, useEffect, useState, createRef } from 'react';\nimport PropTypes from 'prop-types'\n\nlet accessToRef = null\n\nexport default function Chart(props) {\n    let chartRef = createRef()\n\n    const [loadedChart, updateLoadStatus] = useState(false),\n        [data, setData] = useState([]),\n        h = 500,\n        w = 400\n\n    const drawChart = () => {\n        accessToRef = d3.select(chartRef.current)\n            .append('svg')\n            .attr('width', w) // w\n            .attr('height', h) // h\n            .style('background-color', '#ffffff')\n            .style('padding', 10)\n            .style('margin-left', 50)\n\n            updateLoadStatus(true)\n\n        accessToRef.selectAll('rect')\n            .data(props.y)\n            .enter()\n            .append('rect')\n            .attr('x', (d, i) => i * 70)\n            .attr('y', (d, i) => h - 10 * d)\n            .attr('width', 65)\n            .attr('height', (d, i) => d * 10)\n            .attr('fill', 'tomato')\n    }\n\n    useEffect(() => {\n        drawChart()\n    }, []);\n\n\n    return (\n        <Fragment>\n            <h2>Average DNI</h2>\n            <div id=\"chart\" ref={chartRef}></div>\n        </Fragment>\n    );\n}\n\nChart.propTypes = {\n    x: PropTypes.array,\n    y: PropTypes.array,\n    coordsStr: PropTypes.string\n}\n  \nChart.defaultProps = {\n    x: [],\n    y: [],\n    coordsStr: ''\n}"]},"metadata":{},"sourceType":"module"}